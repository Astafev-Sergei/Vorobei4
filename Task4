import SwiftUI

struct ContentView: View {
    @State private var animationProgress: Double = 0.0
    @State private var isAnimating: Bool = false

    var body: some View {
        Button(action: {
            guard !isAnimating else { return }
            isAnimating = true
            withAnimation(.spring(bounce: 0.3).repeatCount(0)) {
                animationProgress = 1.0
            } completion: {
                animationProgress = 0.0
                isAnimating = false
            }
        }) {
            HStack(spacing: 0) {
                Image(systemName: "play.fill")
                    .offset(x: 14)
                    .offset(x: animationProgress * 24)

                Image(systemName: "play.fill")
                    .offset(x: 8)
                    .scaleEffect(1.0 - animationProgress, anchor: .trailing)

                Image(systemName: "play.fill")
                    .offset(x: 14)
                    .scaleEffect(animationProgress, anchor: .trailing)
                    .offset(x: -60)
            }
        }
        .font(.largeTitle)
        .buttonStyle(BackgroundStyle())
    }
}

struct BackgroundStyle: ButtonStyle {
    @State private var isPressedAnimating: Bool = false
    private let animationDuration: Double = 0.22
    private let pressedScale: CGFloat = 0.86

    func makeBody(configuration: Configuration) -> some View {
       
        let isPressed = configuration.isPressed

        return configuration.label
            .scaleEffect(isPressedAnimating ? pressedScale : 1.0)
            .background(
                Circle()
                    .frame(width: 70, height: 70)
                    .foregroundStyle(.gray)
                    .opacity(isPressedAnimating ? 0.1 : 0.0)
            )
            .onChange(of: isPressed) { _, newValue in
               
                if newValue {
                   
                    withAnimation(.easeInOut(duration: animationDuration)) {
                        isPressedAnimating = true
                    } completion: {
                         withAnimation(.easeInOut(duration: animationDuration)) {
                            isPressedAnimating = false
                        }
                    }
                }
            }
    }
}

#Preview {
    ContentView()
}
